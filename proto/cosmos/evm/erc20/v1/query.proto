
syntax = "proto3";
package cosmos.evm.erc20.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/evm/erc20/v1/erc20.proto";
import "cosmos/evm/erc20/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/cosmos/evm/x/erc20/types";

// Query defines the gRPC querier service.
service Query {
  // TokenMappings retrieves registered token mappings
  rpc TokenMappings(QueryTokenMappingsRequest) returns (QueryTokenMappingsResponse) {
    option (google.api.http).get = "/cosmos/evm/erc20/v1/token_mappings";
  }

  // TokenMapping retrieves a registered token mapping
  rpc TokenMapping(QueryTokenMappingRequest) returns (QueryTokenMappingResponse) {
    option (google.api.http).get = "/cosmos/evm/erc20/v1/token_mappings/{token}";
  }

  // Params retrieves the erc20 module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/evm/erc20/v1/params";
  }
}

// QueryTokenMappingsRequest is the request type for the Query/TokenMappings RPC
// method.
message QueryTokenMappingsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryTokenMappingsResponse is the response type for the Query/TokenMappings RPC
// method.
message QueryTokenMappingsResponse {
  // token_mappings is a slice of registered token mappings for the erc20 module
  repeated TokenMapping token_mappings = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTokenMappingRequest is the request type for the Query/TokenMapping RPC method.
message QueryTokenMappingRequest {
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 1;
}

// QueryTokenMappingResponse is the response type for the Query/TokenMapping RPC
// method.
message QueryTokenMappingResponse {
  // token_mappings returns the info about a registered token mapping for the erc20
  // module
  TokenMapping token_mapping = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC
// method.
message QueryParamsResponse {
  // params are the erc20 module parameters
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
